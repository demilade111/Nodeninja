openapi: 3.0.0
info:
  title: HNG Boilerplate API
  description: |
    This is the API documentation for the HNG Boilerplate API.
    You can use this API to manage users, organizations, emails, payments, activity logs, and settings.
  contact: {}
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/DANIELMWIHOTI_1/Node-project/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/DANIELMWIHOTI_1/Node/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.hngboilerplate.com/v1
paths:
  /api/users/register:
    post:
      tags:
      - User
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Bad request
  /api/users/login:
    post:
      tags:
      - User
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Invalid username or password
  /api/users/{userId}:
    get:
      tags:
      - User
      summary: Get user profile
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "404":
          description: User not found
    put:
      tags:
      - User
      summary: Update user profile
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "400":
          description: Bad request
        "404":
          description: User not found
  /api/organizations:
    post:
      tags:
      - Organization
      summary: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
      responses:
        "201":
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        "400":
          description: Bad request
  /api/organizations/{organizationId}:
    get:
      tags:
      - Organization
      summary: Get organization details
      parameters:
      - name: organizationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Organization details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        "404":
          description: Organization not found
  /api/organizations/{organizationId}/users:
    post:
      tags:
      - Organization
      summary: Add a user to an organization
      parameters:
      - name: organizationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationAddUser'
      responses:
        "200":
          description: User added to organization successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserResponse'
        "400":
          description: Bad request
        "404":
          description: Organization not found
  /api/emails/send:
    post:
      tags:
      - Messaging
      summary: Send an email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmail'
      responses:
        "200":
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'
        "400":
          description: Bad request
  /api/payments:
    post:
      tags:
      - Payments
      summary: Create a payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreate'
      responses:
        "201":
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        "400":
          description: Bad request
  /api/payments/{paymentId}:
    get:
      tags:
      - Payments
      summary: Get payment details
      parameters:
      - name: paymentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        "404":
          description: Payment not found
  /api/settings/{userId}:
    get:
      tags:
      - Settings
      summary: Get user settings
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        "404":
          description: User not found
  /api/activity-logs:
    get:
      tags:
      - Activity Logs
      summary: Get activity logs
      responses:
        "200":
          description: Activity logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLogsResponse'
        "404":
          description: Activity logs not found
components:
  schemas:
    UserRegistration:
      required:
      - email
      - first_name
      - last_name
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        created_at:
          type: string
          format: date-time
    UserLogin:
      required:
      - password
      - username_or_email
      type: object
      properties:
        username_or_email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    UserProfile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        created_at:
          type: string
          format: date-time
        profile_picture:
          type: string
        bio:
          type: string
    UserProfileUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        profile_picture:
          type: string
        bio:
          type: string
    OrganizationCreate:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    OrganizationResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
    OrganizationAddUser:
      required:
      - role
      - user_id
      type: object
      properties:
        user_id:
          type: integer
        role:
          type: string
    OrganizationUserResponse:
      type: object
      properties:
        organization_id:
          type: integer
        user_id:
          type: integer
        role:
          type: string
    SendEmail:
      required:
      - body
      - recipient
      - subject
      type: object
      properties:
        recipient:
          type: string
        subject:
          type: string
        body:
          type: string
    EmailResponse:
      type: object
      properties:
        id:
          type: integer
        recipient:
          type: string
        subject:
          type: string
        body:
          type: string
        sent_at:
          type: string
          format: date-time
    PaymentCreate:
      required:
      - amount
      - currency
      - organization_id
      - provider
      - user_id
      type: object
      properties:
        user_id:
          type: integer
        organization_id:
          type: integer
        amount:
          type: number
          format: float
        currency:
          type: string
        provider:
          type: string
    PaymentResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        organization_id:
          type: integer
        amount:
          type: number
          format: float
        currency:
          type: string
        provider:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
    UserSettings:
      type: object
      properties:
        user_id:
          type: integer
        settings:
          type: object
          additionalProperties:
            type: string
    ActivityLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              user_id:
                type: integer
              action:
                type: string
              timestamp:
                type: string
                format: date-time